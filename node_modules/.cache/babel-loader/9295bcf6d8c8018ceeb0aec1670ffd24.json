{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Titi\\\\Documents\\\\GitHub\\\\ClaireDeLune88.github.io\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { StyledApp } from './AppStyles';\nimport { createCalendar } from './helpers';\nimport Hatch from './Hatch';\nimport Toast from 'light-toast';\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: center / cover url('./img/calendar_backdrop.mistletoe.jpg');\n    margin: 0;\n  }\n`;\n\nfunction App() {\n  const [hatches, setHatches] = useState([]); // Check if localStorage contains our calendar \n\n  useEffect(() => {\n    const calendar = localStorage.calendar ? JSON.parse(localStorage.calendar) : createCalendar();\n    setHatches(calendar);\n  }, []); // Store calendar in localStorage\n\n  useEffect(() => {\n    hatches.length && localStorage.setItem('calendar', JSON.stringify(hatches));\n  }, [hatches]); // Check if the date is past\n\n  const isPast = nr => {\n    const today = new Date();\n    today.setMonth(11); // today.setDate(15)\n\n    console.log(\"Jour: \" + today.getDate() + \" Mois: \" + today.getMonth() + \" nr: \" + nr);\n    return today.getDate() >= nr && today.getMonth() === 11;\n  }; // Update Hatch open status\n\n\n  const handleFlipHatch = (id, nr) => {\n    /*\r\n    console.log(\"hatches type: \" + typeof hatches)\r\n    console.log(\"hatches keys: \" + hatches.keys())\r\n    console.log(\"hatches entries: \" + hatches.entries())\r\n      console.log(\"Hatches: \" + hatches.find(x => x.nr === 15))\r\n    console.log(\"Hatches: \" + hatches.find(x => x.nr === 15).nr)\r\n    console.log(\"id: \" + id)\r\n    console.log(\"nr: \" + nr)\r\n    */\n    if (isPast(nr)) {\n      const updatedHatches = hatches.map(hatch => hatch.id === id ? { ...hatch,\n        open: !hatch.open\n      } : hatch);\n      setHatches(updatedHatches);\n    } else {\n      Toast.fail('Tricheuse :0', 3000, () => {// do something after the toast disappears\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(StyledApp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, hatches.map(hatch => /*#__PURE__*/React.createElement(Hatch, {\n    key: hatch.id,\n    hatchData: hatch,\n    handleClick: handleFlipHatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Titi/Documents/GitHub/ClaireDeLune88.github.io/src/App.js"],"names":["React","useState","useEffect","createGlobalStyle","StyledApp","createCalendar","Hatch","Toast","GlobalStyle","App","hatches","setHatches","calendar","localStorage","JSON","parse","length","setItem","stringify","isPast","nr","today","Date","setMonth","console","log","getDate","getMonth","handleFlipHatch","id","updatedHatches","map","hatch","open","fail"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,WAAW,GAAGL,iBAAkB;AACtC;AACA;AACA;AACA;AACA,CALA;;AAOA,SAASM,GAAT,GAAe;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC,CADa,CAGb;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,QAAQ,GAAGC,YAAY,CAACD,QAAb,GACbE,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACD,QAAxB,CADa,GAEbP,cAAc,EAFlB;AAIAM,IAAAA,UAAU,CAACC,QAAD,CAAV;AACD,GANQ,EAMN,EANM,CAAT,CAJa,CAYb;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,OAAO,CAACM,MAAR,IAAkBH,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAiCH,IAAI,CAACI,SAAL,CAAeR,OAAf,CAAjC,CAAlB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT,CAba,CAiBb;;AACA,QAAMS,MAAM,GAAIC,EAAD,IAAQ;AACrB,UAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACAD,IAAAA,KAAK,CAACE,QAAN,CAAe,EAAf,EAFqB,CAGtB;;AACCC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAWJ,KAAK,CAACK,OAAN,EAAX,GACA,SADA,GACYL,KAAK,CAACM,QAAN,EADZ,GAEA,OAFA,GAEUP,EAFtB;AAIA,WAAOC,KAAK,CAACK,OAAN,MAAmBN,EAAnB,IACAC,KAAK,CAACM,QAAN,OAAqB,EAD5B;AAED,GAVD,CAlBa,CA8Bb;;;AACA,QAAMC,eAAe,GAAG,CAACC,EAAD,EAAIT,EAAJ,KAAW;AACjC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI,QAAID,MAAM,CAACC,EAAD,CAAV,EAAe;AACf,YAAMU,cAAc,GAAGpB,OAAO,CAACqB,GAAR,CAAYC,KAAK,IACtCA,KAAK,CAACH,EAAN,KAAaA,EAAb,GAAkB,EAAE,GAAGG,KAAL;AAAYC,QAAAA,IAAI,EAAE,CAACD,KAAK,CAACC;AAAzB,OAAlB,GAAoDD,KAD/B,CAAvB;AAGErB,MAAAA,UAAU,CAACmB,cAAD,CAAV;AACD,KALD,MAMK;AAEDvB,MAAAA,KAAK,CAAC2B,IAAN,CAAW,cAAX,EAA2B,IAA3B,EAAiC,MAAM,CACvC;AACD,OAFC;AAGH;AACF,GAvBD;;AA0BA,sBACE,uDACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,OAAO,CAACqB,GAAR,CAAYC,KAAK,iBAChB,oBAAC,KAAD;AACE,IAAA,GAAG,EAAEA,KAAK,CAACH,EADb;AAEE,IAAA,SAAS,EAAEG,KAFb;AAIE,IAAA,WAAW,EAAEJ,eAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CAFF,CADF;AAeD;;AAED,eAAenB,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { createGlobalStyle } from 'styled-components'\r\nimport { StyledApp } from './AppStyles'\r\nimport { createCalendar } from './helpers'\r\nimport Hatch from './Hatch'\r\nimport Toast from 'light-toast';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background: center / cover url('./img/calendar_backdrop.mistletoe.jpg');\r\n    margin: 0;\r\n  }\r\n`\r\n\r\nfunction App() {\r\n  const [hatches, setHatches] = useState([])\r\n\r\n  // Check if localStorage contains our calendar \r\n  useEffect(() => {\r\n    const calendar = localStorage.calendar\r\n      ? JSON.parse(localStorage.calendar)\r\n      : createCalendar()\r\n\r\n    setHatches(calendar)\r\n  }, [])\r\n\r\n  // Store calendar in localStorage\r\n  useEffect(() => {\r\n    hatches.length && localStorage.setItem('calendar', JSON.stringify(hatches))\r\n  }, [hatches])\r\n\r\n  // Check if the date is past\r\n  const isPast = (nr) => {\r\n    const today = new Date()\r\n    today.setMonth(11)\r\n   // today.setDate(15)\r\n    console.log(\"Jour: \" + today.getDate() + \r\n                \" Mois: \" + today.getMonth() +\r\n                \" nr: \" + nr)\r\n\r\n    return today.getDate() >= nr && \r\n           today.getMonth() === 11\r\n  }\r\n  \r\n  // Update Hatch open status\r\n  const handleFlipHatch = (id,nr) => {\r\n    /*\r\n    console.log(\"hatches type: \" + typeof hatches)\r\n    console.log(\"hatches keys: \" + hatches.keys())\r\n    console.log(\"hatches entries: \" + hatches.entries())\r\n\r\n    console.log(\"Hatches: \" + hatches.find(x => x.nr === 15))\r\n    console.log(\"Hatches: \" + hatches.find(x => x.nr === 15).nr)\r\n    console.log(\"id: \" + id)\r\n    console.log(\"nr: \" + nr)\r\n    */\r\n    if (isPast(nr)){\r\n    const updatedHatches = hatches.map(hatch =>\r\n      hatch.id === id ? { ...hatch, open: !hatch.open } : hatch\r\n    )\r\n      setHatches(updatedHatches)  \r\n    }\r\n    else {\r\n      \r\n        Toast.fail('Tricheuse :0', 3000, () => {\r\n        // do something after the toast disappears\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <StyledApp>\r\n        {hatches.map(hatch => (\r\n          <Hatch\r\n            key={hatch.id}\r\n            hatchData={hatch}\r\n            \r\n            handleClick={handleFlipHatch}\r\n          />\r\n        ))}\r\n      </StyledApp>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}